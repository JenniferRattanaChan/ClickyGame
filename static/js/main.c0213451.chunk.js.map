{"version":3,"sources":["img sync /^/.//.*$","img/aang.png","img/appa.png","img/azula.png","img/bumi.png","img/iroh.png","img/katara.png","img/mai.png","img/momo.png","img/sokka.png","img/toph.png","img/tylee.png","img/zuko.png","components/Navbar.js","components/Jumbotron.js","components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Navbar","className","style","backgroundColor","color","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Jumbotron","Card","props","state","image","src","require","this","onClick","handleClick","alt","React","Component","CardList","name","clicked","includes","gameOver","setState","list","length","gameWin","shuffle","newList","i","j","Math","floor","random","startGame","score","highestScore","alert","x","key","imageArray","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0213451.chunk.js","sourcesContent":["var map = {\n\t\"./aang.png\": 17,\n\t\"./appa.png\": 18,\n\t\"./azula.png\": 19,\n\t\"./bumi.png\": 20,\n\t\"./iroh.png\": 21,\n\t\"./katara.png\": 22,\n\t\"./mai.png\": 23,\n\t\"./momo.png\": 24,\n\t\"./sokka.png\": 25,\n\t\"./toph.png\": 26,\n\t\"./tylee.png\": 27,\n\t\"./zuko.png\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/aang.17d83c8e.png\";","module.exports = __webpack_public_path__ + \"static/media/appa.5394fcc3.png\";","module.exports = __webpack_public_path__ + \"static/media/azula.6d30173c.png\";","module.exports = __webpack_public_path__ + \"static/media/bumi.f15eb66b.png\";","module.exports = __webpack_public_path__ + \"static/media/iroh.7e67560d.png\";","module.exports = __webpack_public_path__ + \"static/media/katara.a05a4aa5.png\";","module.exports = __webpack_public_path__ + \"static/media/mai.c0f8b226.png\";","module.exports = __webpack_public_path__ + \"static/media/momo.9676718b.png\";","module.exports = __webpack_public_path__ + \"static/media/sokka.1ea72d33.png\";","module.exports = __webpack_public_path__ + \"static/media/toph.4d2dd1ec.png\";","module.exports = __webpack_public_path__ + \"static/media/tylee.5d426e6d.png\";","module.exports = __webpack_public_path__ + \"static/media/zuko.5de1ca0c.png\";","import React from 'react';\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" style={{backgroundColor:\"#80c5de\",color:\"black\"}}>\n            <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>   \n        </nav>\n    )\n};\n\nexport default Navbar;","import React from 'react';\nimport './style.css'\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron\" style={{backgroundColor:\"white\",color:\"black\"}}>\n            <div className=\"container\">\n                <h1 className=\"display-4\">Clicky Game!</h1>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Jumbotron;","import React from 'react';\nimport './style.css'\n\nclass Card extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {image:props.image}\n    }\n\n    render() {\n        return <img className=\"click-item\" src={require(`../img/${this.state.image}`)} onClick = {()=> this.props.handleClick(this.state.image)} alt=\"\"></img>;\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\nimport './style.css'\n\nclass CardList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { list: props.list, clicked: [], highestScore: 0 }\n    }\n\n    handleClick = (name) => {\n        if (this.state.clicked.includes(name)) {\n            this.gameOver();\n        } else {\n            this.setState({clicked: [...this.state.clicked, name]},()=>{ \n                if(this.state.list.length===this.state.clicked.length){\n                    this.gameWin();\n                }else{\n                    this.shuffle();\n                } \n            });\n        }\n    }\n\n    shuffle = () =>{\n        let newList = [...this.state.list];\n        for (let i = newList.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [newList[i], newList[j]] = [newList[j], newList[i]];\n        }\n        this.setState({ list: newList });\n    }\n\n    startGame = () => {\n        let score = this.state.clicked.length;\n        if (score > this.state.highestScore) this.setState({ highestScore: score })\n        this.setState({ clicked: [] }) \n    }\n\n    gameOver = () =>{\n        this.startGame();\n        this.shuffle();\n    }\n\n    gameWin = () =>{\n        alert(\"You did it!\")\n        this.startGame();\n        this.shuffle();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"row justify-content-md-center\">\n                    <div className=\"col-2\">Score <span>{this.state.clicked.length}/{this.state.list.length}</span></div>\n                    <div className=\"col-2\">Best Score <span>{this.state.highestScore}</span></div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    {this.state.list.map(x => <Card key={x} image={x} handleClick={this.handleClick}></Card>)}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CardList;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Jumbotron from './components/Jumbotron';\nimport CardList from './components/CardList'\n\nlet imageArray = [\"aang.png\",\"appa.png\",\"azula.png\",\"bumi.png\",\"iroh.png\",\"katara.png\",\"mai.png\",\"momo.png\",\"sokka.png\",\"toph.png\",\"tylee.png\",\"zuko.png\"]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Jumbotron></Jumbotron>\n      <div className=\"container\">\n          <CardList list={imageArray}></CardList>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}